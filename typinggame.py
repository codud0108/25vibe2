import streamlit as st
import random
import time

# ÏÑ§Ï†ï
st.set_page_config(page_title="üÉè Í∞ôÏùÄ Í∑∏Î¶º ÎßûÌûàÍ∏∞ Í≤åÏûÑ", layout="wide")

st.title("üÉè Í∞ôÏùÄ Í∑∏Î¶º ÎßûÌûàÍ∏∞ Í≤åÏûÑ")
st.caption("ÎÇúÏù¥ÎèÑÎ•º ÏÑ†ÌÉùÌïòÍ≥† 2Î∂Ñ ÏïàÏóê Î™®Îì† Í∑∏Î¶ºÏùÑ ÎßûÌòÄÎ≥¥ÏÑ∏Ïöî!")

# Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï
if "initialized" not in st.session_state:
    st.session_state.initialized = False
    st.session_state.game_over = False

# ÎÇúÏù¥ÎèÑ ÏÑ†ÌÉù
if not st.session_state.initialized:
    difficulty = st.selectbox("ÎÇúÏù¥ÎèÑÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", ["Ìïò", "Ï§ë", "ÏÉÅ"])

    # ÎÇúÏù¥ÎèÑÏóê Îî∞Î•∏ Ïåç Í∞úÏàò ÏÑ§Ï†ï
    if difficulty == "Ìïò":
        pair_count = 18
    elif difficulty == "Ï§ë":
        pair_count = 36
    else:
        pair_count = 48

    # Ïπ¥Îìú ÏÉùÏÑ± Î∞è ÏÑûÍ∏∞
    all_emojis = [
        "üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üê∏", "üêµ", "üêî",
        "üêß", "üê¶", "ü¶â", "ü¶Ñ", "üê¥", "üêó", "üêç", "üê¢", "üê¨", "üê≥", "ü¶ã", "üêû", "üêù", "üêõ", "üï∑Ô∏è", "ü¶Ç",
        "üêô", "ü¶ë", "ü¶ê", "ü¶û", "ü¶Ä", "üê°", "üê†", "üêü", "ü¶ì", "ü¶í", "ü¶ò", "üêò", "ü¶è", "üê™", "üê´", "ü¶ô", "ü¶•"
    ]

    if pair_count > len(all_emojis):
        st.error("‚ùó ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Ïù¥Î™®ÏßÄ Í∞úÏàòÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§.")
        st.stop()

    selected_emojis = random.sample(all_emojis, pair_count)
    cards = selected_emojis * 2
    random.shuffle(cards)

    st.session_state.cards = cards
    st.session_state.revealed = [False] * len(cards)
    st.session_state.matched = [False] * len(cards)
    st.session_state.selected = []
    st.session_state.flips = 0
    st.session_state.start_time = time.time()
    st.session_state.initialized = True
    st.session_state.rows = (len(cards) // 6)  # 6Í∞úÏî© Ïó¥ Íµ¨ÏÑ±

# ÏãúÍ∞Ñ Í≥ÑÏÇ∞
TIME_LIMIT = 120
elapsed = int(time.time() - st.session_state.start_time)
remaining_time = max(0, TIME_LIMIT - elapsed)

# Í≤åÏûÑ Ï¢ÖÎ£å Ï≤òÎ¶¨
if remaining_time == 0 and not st.session_state.game_over:
    st.session_state.game_over = True
    st.warning("‚è∞ ÏãúÍ∞Ñ Ï¥àÍ≥º! Í≤åÏûÑÏù¥ ÎÅùÎÇ¨ÏäµÎãàÎã§.")

# Ï†ïÎ≥¥ ÌëúÏãú
st.subheader(f"‚è± ÎÇ®ÏùÄ ÏãúÍ∞Ñ: {remaining_time}Ï¥à")
st.write(f"üîÅ Îí§ÏßëÏùÄ ÌöüÏàò: {st.session_state.flips}")

# Í≤åÏûÑÌåê Íµ¨ÏÑ±
cols_per_row = 6
total_cards = len(st.session_state.cards)
for row_idx in range(0, total_cards, cols_per_row):
    row = st.columns(cols_per_row)
    for i in range(cols_per_row):
        card_idx = row_idx + i
        if card_idx >= total_cards:
            break
        with row[i]:
            if st.session_state.matched[card_idx] or st.session_state.revealed[card_idx]:
                st.button(st.session_state.cards[card_idx], key=f"card{card_idx}", disabled=True)
            else:
                if st.button("‚ùì", key=f"card{card_idx}"):
                    if not st.session_state.game_over and len(st.session_state.selected) < 2:
                        st.session_state.revealed[card_idx] = True
                        st.session_state.selected.append(card_idx)
                        st.session_state.flips += 1

# Îëê Ïû• ÏÑ†ÌÉùÎêêÏùÑ Îïå ÎπÑÍµê
if len(st.session_state.selected) == 2:
    idx1, idx2 = st.session_state.selected
    if st.session_state.cards[idx1] == st.session_state.cards[idx2]:
        st.session_state.matched[idx1] = True
        st.session_state.matched[idx2] = True
    else:
        time.sleep(1)
        st.session_state.revealed[idx1] = False
        st.session_state.revealed[idx2] = False
    st.session_state.selected = []

# Î™®Îì† Îß§Ïπ≠ ÏÑ±Í≥µ Ïãú
if all(st.session_state.matched) and not st.session_state.game_over:
    st.success("üéâ Ï∂ïÌïòÌï©ÎãàÎã§! Î™®Îì† Í∑∏Î¶ºÏùÑ ÎßûÌòîÏñ¥Ïöî!")
    st.session_state.game_over = True

# Îã§Ïãú ÏãúÏûë Î≤ÑÌäº
if st.session_state.game_over:
    if st.button("üîÑ Îã§Ïãú ÏãúÏûëÌïòÍ∏∞"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.experimental_rerun()
